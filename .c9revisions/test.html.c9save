{"ts":1362796373497,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<html>\n\n<header>\n  <meta http-equiv=\"Access-Control-Allow-Origin\" content=\"*\">\n  <meta http-equiv=\"refresh\" content=\"60\" >\n</header>\n\n<link rel=\"stylesheet\" type=\"text/css\" href=\"nagios-api.css\" />\n\n<script src=\"http://code.jquery.com/jquery-1.9.1.min.js\"></script>\n<script src=\"http://underscorejs.org/underscore-min.js\"></script>\n<script type=\"text/javascript\">\n\n  function getClass(obj) {\n    if (typeof obj === \"undefined\")\n      return \"undefined\";\n    if (obj === null)\n      return \"null\";\n    return Object.prototype.toString.call(obj)\n      .match(/^\\[object\\s(.*)\\]$/)[1];\n  }\n\n  function convert_integer_status_to_string(status) {\n    switch(status) { \n      case '0': \n        return \"ok\";\n      case '1': \n        return \"warning\";\n      case '2': \n        return \"critical\";\n      default: \n        return \"na\";\n    }\n  }\n\n  function getBody(content)\n  {\n      test = content.toLowerCase();    // to eliminate case sensitivity\n      var x = test.indexOf(\"<body\");\n      if(x == -1) return \"\";\n\n      x = test.indexOf(\">\", x);\n      if(x == -1) return \"\";\n\n      var y = test.lastIndexOf(\"</body>\");\n      if(y == -1) y = test.lastIndexOf(\"</html>\");\n      if(y == -1) y = content.length;    // If no HTML then just grab everything till end\n\n      return content.slice(x + 1, y);\n  }\n\n  function convert_service_entry_to_tr(host, service, data, left_or_right) {\n    if (data.notifications_enabled == \"0\") {\n      return \"\"\n    } \n    \n    var host_and_status = data.plugin_output.split(' - ')[0]\n    var status          = \"status-\" + convert_integer_status_to_string(data.current_state)\n    return \"<div class='host-entry \" + status + \" \" + left_or_right + \"'>\" +\n      host + ' ' + host_and_status + \n    \"</div>\"\n  }\n\n  function toggle_left_right(left_or_right) {\n    return left_or_right == \"left\" ? \"right\" : \"left\";\n  }\n\n  function get_status(data, t, j) {\n    if (!data.success) return;\n    // generated_html = \"<table class='nagios-api'>\"\n    generated_html = \"\"\n    var left_or_right = \"left\";\n    for (var host in data.content) {\n        // console.log(host + ' ' + data.content[host].plugin_output);\n        // generated_html += convert_service_entry_to_tr(host, 'root', data.content[host])\n\n        for (var service in data.content[host].services) {\n          var service_status = data.content[host].services[service].current_state\n          generated_html += convert_service_entry_to_tr(host, service, data.content[host].services[service], left_or_right)\n          left_or_right = toggle_left_right(left_or_right);\n          // console.log(\"service: \" + service + \" on \" + host + \" has state: \" + service_status)\n        }\n    }\n    // generated_html += \"</table>\"\n    $('#nagios-api').html(generated_html);\n  }\n\n  function createSearchBox(url) { console.log(\"doing nothing with url: \" + url); }\n  function refreshPart(a,b)     { console.log(\"doing nothing with : \" + a + \" or b: \" + b); }\n  \n  window.onload = function() {\n    url = 'http://test.vlc/view/Radiator%20view%20-%20Code/'\n    $.get(url, function (data) {\n      $('#code-ci').html(getBody(data));\n      $('.dashboard').css(\"width\", \"50%\");\n    });\n\n      \n    $.getJSON('http://hector.vlc:6315/state', get_status);\n  };\n  \n</script>\n\n<body>\n  <div id=\"code-ci\"> </div>\n  <div id=\"nagios-api\"> </div>\n</body>\n\n</html>\n"]],"start1":0,"start2":0,"length1":0,"length2":3304}]],"length":3304}
{"contributors":[],"silentsave":false,"ts":1362796618933,"patch":[[{"diffs":[[0,"n.js\"></script>\n"],[1,"<script src=\"ci-monitor.js\"> </script>\n"],[0,"<script type=\"te"]],"start1":316,"start2":316,"length1":32,"length2":71}]],"length":3343,"saved":false}
{"ts":1362796723548,"patch":[[{"diffs":[[0,"\">\n\n"],[-1,"  function getClass(obj) {\n    if (typeof obj === \"undefined\")\n      return \"undefined\";\n    if (obj === null)\n      return \"null\";\n    return Object.prototype.toString.call(obj)\n      .match(/^\\[object\\s(.*)\\]$/)[1];\n  }\n\n  function convert_integer_status_to_string(status) {\n    switch(status) { \n      case '0': \n        return \"ok\";\n      case '1': \n        return \"warning\";\n      case '2': \n        return \"critical\";\n      default: \n        return \"na\";\n    }\n  }\n\n  function getBody(content)\n  {\n      test = content.toLowerCase();    // to eliminate case sensitivity\n      var x = test.indexOf(\"<body\");\n      if(x == -1) return \"\";\n\n      x = test.indexOf(\">\", x);\n      if(x == -1) return \"\";\n\n      var y = test.lastIndexOf(\"</body>\");\n      if(y == -1) y = test.lastIndexOf(\"</html>\");\n      if(y == -1) y = content.length;    // If no HTML then just grab everything till end\n\n      return content.slice(x + 1, y);\n  }\n\n  function convert_service_entry_to_tr(host, service, data, left_or_right) {\n    if (data.notifications_enabled == \"0\") {\n      return \"\"\n    } \n    \n    var host_and_status = data.plugin_output.split(' - ')[0]\n    var status          = \"status-\" + convert_integer_status_to_string(data.current_state)\n    return \"<div class='host-entry \" + status + \" \" + left_or_right + \"'>\" +\n      host + ' ' + host_and_status + \n    \"</div>\"\n  }\n\n  function toggle_left_right(left_or_right) {\n    return left_or_right == \"left\" ? \"right\" : \"left\";\n  }\n\n  function get_status(data, t, j) {\n    if (!data.success) return;\n    // generated_html = \"<table class='nagios-api'>\"\n    generated_html = \"\"\n    var left_or_right = \"left\";\n    for (var host in data.content) {\n        // console.log(host + ' ' + data.content[host].plugin_output);\n        // generated_html += convert_service_entry_to_tr(host, 'root', data.content[host])\n\n        for (var service in data.content[host].services) {\n          var service_status = data.content[host].services[service].current_state\n          generated_html += convert_service_entry_to_tr(host, service, data.content[host].services[service], left_or_right)\n          left_or_right = toggle_left_right(left_or_right);\n          // console.log(\"service: \" + service + \" on \" + host + \" has state: \" + service_status)\n        }\n    }\n    // generated_html += \"</table>\"\n    $('#nagios-api').html(generated_html);\n  }\n\n  function createSearchBox(url) { console.log(\"doing nothing with url: \" + url); }\n  function refreshPart(a,b)     { console.log(\"doing nothing with : \" + a + \" or b: \" + b); }\n  \n"],[0,"  wi"]],"start1":400,"start2":400,"length1":2561,"length2":8}]],"length":790,"saved":false}
{"ts":1362796751016,"patch":[[{"diffs":[[0,"state', "],[-1,"get"],[1,"display_nagios"],[0,"_status)"]],"start1":667,"start2":667,"length1":19,"length2":30}]],"length":801,"saved":false}
